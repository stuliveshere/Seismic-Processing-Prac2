\documentclass[a4paper, 10pt]{article}
\usepackage[cm]{fullpage}


\usepackage{listings}
\usepackage{color}

\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}

\lstset{ %
  backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}
  basicstyle=\footnotesize,        % the size of the fonts that are used for the code
  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
  breaklines=true,                 % sets automatic line breaking
  captionpos=b,                    % sets the caption-position to bottom
  commentstyle=\color{mygreen},    % comment style
  deletekeywords={...},            % if you want to delete keywords from the given language
  escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
  extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
  frame=single,                    % adds a frame around the code
  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
  keywordstyle=\color{blue},       % keyword style
  language=Octave,                 % the language of the code
  morekeywords={*,...},            % if you want to add more keywords to the set
  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
  numbersep=5pt,                   % how far the line-numbers are from the code
  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
  rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
  showstringspaces=false,          % underline spaces within strings only
  showtabs=false,                  % show tabs within strings adding particular underscores
  stepnumber=2,                    % the step between two line-numbers. If it's 1, each line will be numbered
  stringstyle=\color{mymauve},     % string literal style
  tabsize=2,                       % sets default tabsize to 2 spaces
  title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
}
\usepackage{graphicx} % Required for the inclusion of images
\usepackage{natbib} % Required to change bibliography style to APA
\usepackage{amsmath} % Required for some math elements 
\usepackage{soul}

\setlength\parindent{0pt} % Removes all indentation from paragraphs

\title{Seismic Processing \\ Prac 2 - Processing a synthetic dataset.} % Title

\author{ERTH3021} % Author name

\date{\today} % Date for the report

\begin{document}

\maketitle % Insert the title, author and date
This is the second of two pracs on seismic data processing.  In this prac we will be processing the dataset generated in prac 1.  
\par~\\
If you do not have the dataset from prac 1 is it available for download at \textbf{http://goo.gl/YuZgE9}
\par~\\
As with prac 1 code templates have been provided. The prac can be downloaded from \hl{insert link here}

\section{Introduction}
Seismic data processing involves taking raw seismic data and generating an image which can be related to the geology targetted by the seismic survey.  Seismic processing usualling involves a number of steps, including
\begin{itemize}
\item velocity analysis
\item geometric corrections (normal moveout,  statics, migration)
\item amplitude corrections (amplitude recovery, AGC)
\item noise attenuation
\item CMP stacking
\item deconvolution
\end{itemize}
Although not neccessarily in this order.
\par~\\
For this prac we will use the following processing sequence:
\begin{enumerate}
\item load and QC (quality control) data
\item sort into CDP gathers
\item amplitude recovery
\item move out with constant velocity
\item field stack (aka brute stack)
\item first velocity analysis
\item first velocity stack
\item pre-stack noise attenuation
\item second velocity analysis
\item second velocity stack
\item post-stack noise attenuation
\end{enumerate}
This is somewhat like a processing sequence used in a commercial processing house.  Note the iterative nature of the sequence - this is a common trait of seismic processing.
\par~\\
The final image quality is influenced by the accuracy of the seismic velocities and the parameters selected.  inaccurate velocities can lead to imperfect moveout which can affect stack quality.  poor selection of processing parameters can harm the data - for example a harsh noise attenuation routine might also attenuate the signal as well as the noise. finding optimum parameters usually involves significant amounts of testing.
\par~\\
In this prac you will be picking your own velocities and selecting your own processing parameters.  You will be expected to test a range of parameters and discuss why you chose those parameters in your report.  
\subsection*{Exercise 1: Load data and perform QC}
In this exercise we will create an initialisation routine which will load our dataset into numpy, and set up some initial parameters. We will then have a look at some raw shot gathers to ensure the data is loaded correctly (QC).
\subsection*{Exercise 2: Sort into CMPs}
CMP gathers collect all traces which pass through the same CMP into a single gather.  CMP gathers are generally used for velocity analysis and stacking. The number of traces in a gather is refered to as the fold.  
\par~\\
Sort the dataset into CMP gathers and perform QC.  Compare the CMP gathers to the shot gathers from exercise 1 and discuss why they look different.
\par~\\
Extract one CDP gather for testing.  

\subsection*{Exercise 3: Amplitude Recovery}
Loss of amplitude due to spherical divergence and reflection/transmission coefficients are only part of the reason deeper signals are weaker.  Spherical divergence and reflection/tranmission coefficients are often refered to as "elastic", because they conserve energy as a wave.  But there are also anelastic effects, including fluidic movement and grain boundary friction which results in seismic energy being converted to heat.  
\par~\\
We have already seen in the raw gathers that deeper signals are weaker and much more difficult to see. In the last prac we compensated for this using an AGC.  An AGC normalises the amplitude in a sliding window over every trace, based upon the amplitudes in the window.  Sometimes in seismic processing we use an AGC prior to stack, but sometimes we want to preserve the relative amplitude of samples between traces.  We call this amplitude recovery.
\par~\\
In theory we could correct for spherical divergence, but it is much more challenging to correct for the remaining sources of attenuation.  Thus a generic, tunable formula is generally, where testing is used to fine tune the result until it "looks right".  One such formula is
\[ R = \exp^{\gamma t}\],

where
\begin{itemize}
\item $R$ is the amplitude correction
\item $\gamma$ is the tunable parameter
\item $t$ time
\end{itemize}

Write a python function which implements this formula, and apply to your test gather.  Test various values of $/gamma$ such that the amplitude of the bottom reflector in the gather is closer in amplitude to the top reflectors. Show the gather before and after amplitude recovery.

\subsection*{Exercise 4: Normal moveout correction}
Notice in the raw CMP gathers the reflectors have a hyperbolic shape.  In order to stack a CMP the reflectors need to be flat.  The reason for the hyperbolic shape is normal moveout, and flattening reflectors is generally refered to as normal moveout correction.  For a flat, horizontal reflector, the traveltime equation is
\[ {t_x}^2 = {t_0}^2 + \frac{x^2}{v^2}\]
where
\begin{itemize}
\item $t_x$ is the travel time at offset x
\item $t_0$ is the traveltime at offset 0
\item $x$ is the offset
\item $v$ is the velocity
\end{itemize}
Write a python function which implements the normal moveout correction. That is, re-arrange the above equation so that we can calculate the zero offset traveltime $t_0$.
\par~\\
The function which applies your move out correction to the dataset has been supplied. Using your test CMP gather, try to find a single velocity (aka constant velocity) which flattens the reflectors the most. Show that gather before and after moveout correction.  Discuss the issues associated with normal moveout with a constant velocity.
\par~\\
Note the code relating to "stretch".  The amount of moveout correction is not linear, and thus shallow data tends to get stretched. Experiement with stretch values on your test CMP gather. Show a gather with and without stretch.  Discuss the potential impact of stretched data on a stack.
\par~\\
The way I have implemented the NMO correction is slightly computationaly intensive.  Once you have selected a velocity and stretch mute value you are happy with, perform the NMO correction to the entire dataset, outputting the result to a file.  Remember that our function syntax in main is $function(input, output, **params)$. In this case you want to set the output to a filename, i.e. "nmo_gathers.su"

\subsection*{Exercise 5: Field Stack}
Stacking involves taking all of the traces in a single CMP gather and summing together into once trace.  The amplitude of the trace is then normalised by the fold of the gather.  Thus stacking can also be considered as finding the average trace at a given CMP location.  When all CMP gathers are stacked, the resulting image has one trace at each CMP location.  This is generally refered to as a stack or a stacked section.
\par~\\
Write a function which will stack any gather given to it.  Note this can be done in one line. Hint: $mean = \bar{x} = \frac{x_1 + x_2 + \ldots + x_n}{n}$ . An even bigger hint: think about the axis you want to use numpy.mean() along, and it's not the first axis.
\par~\\
Remember that your input this time is the file you output from the last exercise.  

\subsection*{Exercise 6: First Velocity Analysis}






\end{document}